// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-10-18 10:50:47.186508 +0200 CEST m=+0.031067683

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "GNU GPLv3",
            "url": "https://www.gnu.org/licenses/gpl-3.0.fr.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/measures": {
            "get": {
                "description": "List all measures",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Measure"
                            }
                        }
                    }
                }
            }
        },
        "/measures/{day_timestamp}/average": {
            "get": {
                "description": "Measure average for day timestamp",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "number",
                        "description": "Second timestamp of the day chosen (any timestamp during the day works)",
                        "name": "day_timestamp",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.AverageResponse"
                        }
                    }
                }
            }
        },
        "/measures/{measure_type}": {
            "get": {
                "description": "List measures between timestamp",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "timestamp",
                        "name": "from",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "timestamp",
                        "name": "to",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ex: temperature",
                        "name": "measure_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Measure"
                            }
                        }
                    }
                }
            }
        },
        "/sensors/{sensor_id}/measures": {
            "get": {
                "description": "Retrieve sensor measures for sensor id",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Ex: 1",
                        "name": "sensor_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Measure"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Measure": {
            "type": "object",
            "properties": {
                "airportId": {
                    "type": "string"
                },
                "measureType": {
                    "type": "string"
                },
                "measureValue": {
                    "type": "number"
                },
                "sensorId": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "handlers.AverageResponse": {
            "type": "object",
            "properties": {
                "averages": {
                    "type": "object"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Swagger API documentation for api-service",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
